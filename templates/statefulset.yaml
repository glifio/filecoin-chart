apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-lotus
  labels:
    app: lotus-node-app
spec:
  replicas: {{ .Values.replicaCount }}
{{- if .Values.Lotus.service.slave }}
  serviceName: {{ .Values.Lotus.service.release }}-lotus-service
{{- else }}
  serviceName: {{ .Release.Name }}-lotus-service
{{- end }}
  selector:
    matchLabels:
      app: lotus-node-app
      chart: {{ .Chart.Name }}-{{ .Chart.Version }}
      heritage: {{ .Release.Service }}
{{- if .Values.Lotus.service.slave }}
      release: {{ .Values.Lotus.service.release }}
      release-fork: {{ .Release.Name }}
{{- else }}
      release: {{ .Release.Name }}
{{- end }}
  template:
    metadata:
      labels:
        app: lotus-node-app
        chart: {{ .Chart.Name }}-{{ .Chart.Version }}
        heritage: {{ .Release.Service }}
{{- if .Values.Lotus.service.slave }}
        release: {{ .Values.Lotus.service.release }}
        release-fork: {{ .Release.Name }}
{{- else }}
        release: {{ .Release.Name }}
{{- end }}
    spec:
{{- if .Values.podAntiAffinity.enabled }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - lotus-node-app
              topologyKey: "kubernetes.io/hostname"
{{- end }}
{{- if .Values.SecurityContext.runAsNonRoot }}
      securityContext:
        runAsGroup: {{ .Values.SecurityContext.runAsGroup }}
        runAsUser: {{ .Values.SecurityContext.runAsUser }}
        fsGroup: {{ .Values.SecurityContext.fsGroup }}
{{- end }}
      volumes:
{{- if and .Values.IPFS.enabled (not .Values.persistence.enabled) .Values.persistence.hostPath }}
        - name: vol-ipfs
          hostPath:
            path: {{ .Values.persistence.hostPath }}
            type: Directory
{{- end }}
{{- if .Values.Lotus.enabled }}
{{- if .Values.secretVolume.enabled }}
        - name: lotus-secret-vol
          secret:
            secretName: {{ .Release.Name }}-lotus-secret
            defaultMode: 384 # permission 0600
{{- end }}
{{- if and (not .Values.persistence.enabled) .Values.persistence.hostPath }}
        - name: vol-lotus
          hostPath:
            path: {{ .Values.persistence.hostPath }}
            type: Directory
{{- end }}
{{- if .Values.isEFS.enabled }}
        - name: persistent-storage
          persistentVolumeClaim:
            claimName: {{ .Values.globalParameters.project.name }}-{{ .Values.globalParameters.environment.name }}-{{ .Values.globalParameters.region.shortRegionName }}-{{ .Values.globalParameters.subEnvironment.name }}-{{- .Release.Name -}}-efs-claim
{{- end }}
      initContainers:
{{- if and (not .Values.persistence.enabled) .Values.persistence.hostPath }}
      - name: hostpath-permission
        image: busybox
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command: ["/bin/sh","-c"]
        args:
          - mkdir -p /tmp/lotus /tmp/ipfs && chown -R 2000:2000 /tmp;
        securityContext:
          runAsUser: 0
        volumeMounts:
          - name: vol-lotus
            mountPath: /tmp
{{- end }}
{{- end }}
      containers:
{{- if .Values.IPFS.enabled }}
      - name: {{ .Chart.Name }}-ipfs
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        image: ipfs/go-ipfs
        livenessProbe:
          httpGet:
            path: /webui
            port: 5001
          initialDelaySeconds: 200
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 6
        securityContext:
          runAsUser: 0
        ports:
        - containerPort: 4001
        - containerPort: 5001
        - containerPort: 8080
          name: rpc
        volumeMounts:
          - name: vol-ipfs
            mountPath: /data/ipfs
            {{- if and (not .Values.persistence.enabled) .Values.persistence.hostPath }}
            subPath: ipfs
            {{- end }}
        resources:
{{ toYaml .Values.resources.ipfs | indent 10 }}
{{- end }}
{{- if .Values.Lotus.enabled }}
      - name: {{ .Chart.Name }}
        image: {{ .Values.image.repository }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command: ["/etc/lotus/docker/run"]
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh","-c","rm -f $INFRA_LOTUS_HOME/.lotus/sync-complete"]
        env:
  {{- if .Values.Lotus.maxheapsize }}
        - name: LOTUS_MAX_HEAP
          value: "{{ .Values.Lotus.maxheapsize }}"
  {{- end}}
        - name: INFRA_LOTUS_DAEMON
          value: "true"
        - name: INFRA_LOTUS_HOME
          value: /home/lotus_user
  {{- if .Values.Lotus.service.gateway }}
        - name: INFRA_LOTUS_GATEWAY
          value: "true"
  {{- end}}
  {{- if .Values.init.clearRestart.enabled }}
        - name: INFRA_CLEAR_RESTART
          value: "true"
  {{- else}}
        - name: INFRA_CLEAR_RESTART
          value: "false"
  {{- end }}
  {{- if .Values.init.importSnapshot.enabled }}
    {{- if .Values.init.importSnapshot.SNAPSHOTURL }}
        - name: INFRA_IMPORT_SNAPSHOT
          value: "true"
        - name: SNAPSHOTURL
          value: {{ .Values.init.importSnapshot.SNAPSHOTURL }}
    {{- else }}
        - name: INFRA_IMPORT_SNAPSHOT_FROM_IPFS
          value: "true"
        - name: SNAPSHOT_CID
          value: {{ .Values.init.importSnapshot.SNAPSHOT_CID }}
        - name: IPFS_GW
          value: {{ .Values.init.importSnapshot.IPFS_GW }}
    {{- end }}
  {{- end }}
  {{- if .Values.init.sync.enabled }}
        - name: INFRA_SYNC
          value: "true"
  {{- end }}

  {{- if .Values.secretVolume.enabled }}
        - name: INFRA_SECRETVOLUME
          value: "true"
  {{- end }}
  {{- if .Values.secretVolume.persistNodeID }}
        - name: INFRA_PERSISTNODEID
          value: "true"
  {{- end }}
  {{- if .Values.healthcheck.enabled }}
        - name: NETWORK
          value: "{{ .Values.healthcheck.network }}"
    {{- if .Values.healthcheck.allowedDelay }}
        - name: ALLOWED_DELAY
          value: "{{ .Values.healthcheck.allowedDelay }}"
    {{- end }}
  {{- end }}
  {{- if .Values.IPFS.enabled }}
        - name: LOTUS_CLIENT_USEIPFS
          value: "true"
        - name: LOTUS_CLIENT_IPFSUSEFORRETRIEVAL
          value: "true"
    {{- if .Values.ipfsDNS }}
        - name: LOTUS_CLIENT_IPFSMADDR
          value: "/dns4/{{ .Values.ipfsDNS }}/tcp/5001"
    {{- else }}
        - name: LOTUS_CLIENT_IPFSMADDR
          value: "/ip4/127.0.0.1/tcp/5001"
    {{- end }}
  {{- end }}
  {{- if and .Values.IPFS.enabled (eq .Values.persistence.snapshots.uploadToIpfs.export "cold") }}
        - name: INFRA_SHEDEXPORT
          value: "true"
        - name: INFRA_SHEDEXPORTPATH
          value: "/data/ipfs/lotus-new.car"
        - name: INFRA_SHEDEXPORTPERIOD
          value: "{{ .Values.persistence.snapshots.uploadToIpfs.shedPeriod }}"
  {{- end }}
  {{- if ne .Values.persistence.snapshots.uploadToIpfs.export "cold" }}
        livenessProbe:
    {{- if .Values.healthcheck.enabled }}
          tcpSocket:
            port: api
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 10
    {{- end }}
  {{- end }}
  {{- if .Values.healthcheck.readinessProbe }}
        readinessProbe:
          exec:
            command:
            - healthcheck
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 3
  {{- end }}
  {{- if .Values.init.importSnapshot.enabled }}
        startupProbe:
          exec:
            command:
            - cat
            - /home/lotus_user/.lotus/import-complete
  {{- else }}
        startupProbe:
          exec:
            command:
            - cat
            - /home/lotus_user/.lotus/sync-complete
  {{- end }}
          failureThreshold: 1000
          periodSeconds: 200
          successThreshold: 1
          timeoutSeconds: 10
        ports:
        - containerPort: 1234
          name: api
        - containerPort: 1235
          name: p2p
  {{- if .Values.Lotus.service.gateway }}
        - containerPort: 2346
          name: gateway
  {{- end }}
        volumeMounts:
  {{- if .Values.secretVolume.enabled }}
          - name: lotus-secret-vol
            mountPath: /keystore
  {{- end }}
  {{- if .Values.isEFS.enabled }}
          - name: persistent-storage
          {{- if eq .Values.Lotus.lotusHomeDirLocation.isKeepingData.inEFS.bool true }}
            mountPath: {{ .Values.Lotus.lotusHomeDirLocation.path }}
          {{- else }}
            mountPath: {{ .Values.Lotus.lotusHomeDirLocation.pathTmp }}
          {{- end }}
  {{- end }}
          - name: vol-lotus
          {{- if ne .Values.Lotus.lotusHomeDirLocation.isKeepingData.inEFS.bool true }}
            mountPath: {{ .Values.Lotus.lotusHomeDirLocation.path }}
          {{- else }}
            mountPath: {{ .Values.Lotus.lotusHomeDirLocation.pathTmp }}
            {{- if and (not .Values.persistence.enabled) .Values.persistence.hostPath }}
            subPath: lotus
            {{- end }}
          {{- end }}
            {{- if and (.Values.init.import.volume) (.Values.init.import.enabled) }}
          - name: {{ (index .Values.init.import.volume 0).name }}
            mountPath: /chain
            {{- end }}
  {{- if and .Values.IPFS.enabled .Values.persistence.snapshots.uploadToIpfs.enabled }}
          - name: vol-ipfs
            mountPath: /data/ipfs
            {{- if and (not .Values.persistence.enabled) .Values.persistence.hostPath }}
            subPath: ipfs
            {{- end }}
  {{- end }}
        resources:
{{ toYaml .Values.resources.lotus | indent 10 }}
{{- end }}
{{- if .Values.nodeSelector.enabled }}
      nodeSelector:
{{ toYaml .Values.nodeSelector.nodeLabel | indent 8 }}
{{- end }}
{{- if .Values.persistence.enabled }}
  volumeClaimTemplates:
{{- if .Values.Lotus.enabled }}
    - metadata:
        name: vol-lotus
      spec:
        accessModes:
            {{- range .Values.persistence.lotus.accessModes }}
            - {{ . | quote }}
            {{- end }}
        resources:
            requests:
                storage: {{ .Values.persistence.lotus.size | quote }}
        {{- if not .Values.persistence.lotus.storageClassName }}
        {{- if .Values.persistence.snapshots.enabled }}
        storageClassName: "ebs-sc"
        {{- else }}
        storageClassName: ""
        {{- end }}
        {{- else }}
        storageClassName: "{{ .Values.persistence.lotus.storageClassName }}"
        {{- end }}
        {{- if .Values.persistence.snapshots.restore.enabled }}
        dataSource:
          name: {{ .Values.persistence.snapshots.restore.name }}
          kind: VolumeSnapshot
          apiGroup: snapshot.storage.k8s.io
        {{- end }}
{{- end }}
{{- if .Values.IPFS.enabled }}
    - metadata:
        name: vol-ipfs
        {{- range $key, $value := .Values.persistence.ipfs.annotations }}
            {{ $key }}: {{ $value }}
        {{- end }}
      spec:
        accessModes:
            {{- range .Values.persistence.ipfs.accessModes }}
            - {{ . | quote }}
            {{- end }}
        resources:
            requests:
                storage: {{ .Values.persistence.ipfs.size | quote }}
        {{- if not .Values.persistence.ipfs.storageClassName }}
        {{- if .Values.persistence.snapshots.enabled }}
        storageClassName: "ebs-sc"
        {{- else }}
        storageClassName: ""
        {{- end }}
        {{- else }}
        storageClassName: "{{ .Values.persistence.ipfs.storageClassName }}"
        {{- end }}
{{- end }}
{{- end }}
