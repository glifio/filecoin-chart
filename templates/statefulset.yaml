{{- if .Values.lotusStsCreate }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-lotus
  labels:
    {{- range $key, $value := .Values.lotusStsLabels }}
    {{ $key }}: {{ $value | quote }}
    {{- end }}
spec:
  replicas: {{ .Values.lotusStsReplicas }}
  serviceName: {{ .Release.Name }}-lotus-service
  selector:
    matchLabels:
      {{- range $key, $value := .Values.lotusStsLabels }}
      {{ $key }}: {{ $value }}
      {{- end }}
  template:
    metadata:
      labels:
        chart: {{ .Chart.Version }}
        appVersion: {{ .Chart.AppVersion }}
        heritage: {{ .Release.Service }}
        {{- range $key, $value := .Values.lotusStsLabels }}
        {{ $key }}: {{ $value }}
        {{- end }}
    spec:
      securityContext:
        runAsGroup: 2000
        runAsUser: 2000
        fsGroup: 2000
      volumes:
      {{- if .Values.lotusEnv.INFRA_SECRETVOLUME }}
        - name: lotus-secret-vol
          secret:
            secretName: {{ .Release.Name }}-lotus-secret
            defaultMode: 384 # permission 0600
      {{- end}}
      {{- if or .Values.lotusVolume.hostPath.enabled }}
        - name: {{ .Values.lotusVolume.name }}
          hostPath:
            path: {{ .Values.lotusVolume.hostPath.path }}
            type: Directory
      {{- end }}
      {{- if .Values.useLotusConfigMap }}
        - name: lotus-config
          configMap:
            name: {{ .Release.Name }}-configmap
      {{- end }}
      initContainers:
      {{- if .Values.InitContainerPermissions }}
      - name: hostpath-permission
        image: busybox
        imagePullPolicy: Always
        command: ["/bin/sh","-c"]
        args:
          - mkdir -p /tmp/lotus /tmp/snapshot && chown -R 2000:2000 /tmp;
        securityContext:
          runAsUser: 0
        volumeMounts:
          - name: {{ .Values.lotusVolume.name }}
            mountPath: /tmp
      {{- end }}
      {{- if .Values.downloadSnapshot.enabled }}
      - name: download-zst-snapshot
        image: alpine:3.17
        imagePullPolicy: Always
        workingDir: /home/lotus_user/snapshot
        env:
          - name: INFRA_CLEAR_RESTART
            value: {{ .Values.lotusEnv.INFRA_CLEAR_RESTART | quote }}
          - name: SNAPSHOTURL
            value: {{ .Values.lotusEnv.SNAPSHOTURL }}
          - name: DOWNLOAD_FROM
            value: {{ .Values.lotusEnv.DOWNLOAD_FROM }}
          - name: ENABLE_UNPACK
            value: {{ .Values.downloadSnapshot.unpack | quote }}
          - name: ENABLE_CHECK_LEDGER
            value: {{ .Values.downloadSnapshot.checkLedger | quote }}
          - name: INFRA_LOTUS_HOME
            value: {{ .Values.lotusEnv.INFRA_LOTUS_HOME }}
          - name: ARIA2_VERSION
            value: {{ .Values.downloadSnapshot.dependecies.aria2 }}
          - name: ZSTD_VERSION
            value: {{ .Values.downloadSnapshot.dependecies.zstd }}
        command:
          - "/bin/sh"
          - "-c"
        args:
          - echo "Installing dependencies...";
            apk --no-cache add aria2="$ARIA2_VERSION" zstd="$ZSTD_VERSION";
            if [ "$INFRA_CLEAR_RESTART" = true ]; then
            echo "Deleting the ledger...";
            rm -rf /home/lotus_user/.lotus/*;
            echo "Deleting the previous snapshots...";
            rm -rf /home/lotus_user/snapshot/*;
            fi;
            LOTUS_PATH="$INFRA_LOTUS_HOME/.lotus";
            if [ "$INFRA_CLEAR_RESTART" = false ] && [ "$ENABLE_CHECK_LEDGER" = true ] && [ "$(ls -A $LOTUS_PATH)" ]; then
            echo "Ledger check is enabled, and the ledger already exists. Exiting...";
            exit 0;
            fi;
            ARIA2_ITERATION=1;
            while [ $ARIA2_ITERATION -le 50 ]; do
              echo "Downloading zst snapshot, attempt $ARIA2_ITERATION";
              aria2c --allow-overwrite -x 16 -s 32 -k 50M --lowest-speed-limit=1M "$DOWNLOAD_FROM" -o "downloaded_snapshot.zst";
              ARIA2_EXIT_CODE=$(echo $?);
              echo "Aria2 exit code is $ARIA2_EXIT_CODE";
              if [ $ARIA2_EXIT_CODE -eq 0 ]; then
                break;
              fi;
              ARIA2_ITERATION=$(( ARIA2_ITERATION - 1 ));
            done
            
            if [ "$ENABLE_UNPACK" = false ]; then
            echo "Unpack is disabled. Copying to the destination as is...";
            mv "downloaded_snapshot.zst" "$SNAPSHOTURL";
            else
            pzstd -v --processes "$(nproc)" --force --rm --decompress "downloaded_snapshot.zst" -o "$SNAPSHOTURL";
            fi;
        securityContext:
          runAsUser: 0
        volumeMounts:
          - name: {{ .Values.lotusVolume.name }}
            mountPath: /home/lotus_user/snapshot
            subPath: snapshot
          - name: {{ .Values.lotusVolume.name }}
            mountPath: /home/lotus_user/.lotus
            subPath: lotus
      {{- end }}
      containers:
      - name: {{ .Chart.Name }}
        image: {{ .Values.lotusContainer.image }}
        imagePullPolicy: {{ .Values.lotusContainer.imagePullPolicy }}
        command: {{ toJson .Values.lotusContainer.command }}
        lifecycle:
          preStop:
            exec:
              command: {{ toJson .Values.lotusContainer.preStopCommand }}
        env:
        {{- range $key, $value := .Values.lotusEnv }}
        - name: {{ $key }}
          value: {{ $value | quote }}
        {{- end }}
        {{- if .Values.livenessProbe.enabled }}
        livenessProbe:
          tcpSocket:
            port: api
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          successThreshold: {{ .Values.livenessProbe.successThreshold }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
        {{- end }}
        {{- if .Values.readinessProbe.enabled }}
        readinessProbe: 
          exec:
            command:
            {{ toYaml .Values.readinessProbe.command }}
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          successThreshold: {{ .Values.readinessProbe.successThreshold }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
        {{- end }}
        {{- if .Values.startupProbe.enabled }}
        startupProbe:
          exec:
            command:
            - cat
            {{- if eq .Values.lotusEnv.INFRA_IMPORT_SNAPSHOT "true" }}
            - /home/lotus_user/.lotus/import-complete
            {{- else }}
            - /home/lotus_user/.lotus/sync-complete
            {{- end }}
          failureThreshold: {{ .Values.startupProbe.failureThreshold }}
          periodSeconds: {{ .Values.startupProbe.periodSeconds }}
          successThreshold: {{ .Values.startupProbe.successThreshold }}
          timeoutSeconds: {{ .Values.startupProbe.timeoutSeconds }}
        {{- end }}
        ports:
        - containerPort: 1234
          name: api
        - containerPort: {{ .Values.lotusP2pPort }}
          name: p2p
        - containerPort: 2346
          name: gateway
        volumeMounts:
          {{- if .Values.lotusEnv.INFRA_SECRETVOLUME }}
          - name: lotus-secret-vol
            mountPath: /keystore
          {{- end }}
          - name: {{ .Values.lotusVolume.name }}
            mountPath: /home/lotus_user/.lotus
            {{- if .Values.lotusVolume.hostPath.enableSubPath }}
            subPath: lotus
            {{- end }}
          {{- if and .Values.lotusEnv.INFRA_IMPORT_SNAPSHOT }}
          - name: {{ .Values.lotusVolume.name }}
            mountPath: /home/lotus_user/snapshot
            subPath: snapshot
          {{- end }}
          {{- if .Values.useLotusConfigMap }}
          - name: lotus-config
            mountPath: /home/lotus_user/config.toml
            subPath: config.toml
          {{- end }}
        resources:
          limits:
            cpu: {{ .Values.lotusCpuLimit }}
            memory: {{ .Values.lotusMemoryLimit }}
          requests:
            cpu: {{ .Values.lotusRequestsCpu }}
            memory: {{ .Values.lotusRequestsMemory }}

      nodeSelector:
      {{- range $key, $value := .Values.nodeSelector }}
        {{ $key }}: {{ $value | quote }}
      {{- end }}
  {{- if not .Values.lotusVolume.hostPath.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: {{ .Values.lotusVolume.name }}
      spec:
        accessModes:
          {{- range .Values.lotusVolumeAccessModes }}
            - {{ . | quote }}
          {{- end }}
        resources:
            requests:
                storage: {{ .Values.lotusVolumeSize | quote }}
        storageClassName: {{ .Values.lotusVolumeStorageClass | quote }}
    {{- end }}
{{- end }}
