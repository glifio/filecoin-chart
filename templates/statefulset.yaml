{{- if .Values.createLotusStatefulSet }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-lotus
  labels:
    app: lotus-node-app
spec:
  replicas: {{ .Values.lotusStatefulSetReplicas }}
  serviceName: {{ .Release.Name }}-lotus-service
  selector:
    matchLabels:
      {{- if .Values.isSlaveNode }}
      release: {{ .Values.customReleaseName }}
      release-fork: {{ .Release.Name }}
      {{- else }}
      release: {{ .Release.Name }}
      {{- end }}
  template:
    metadata:
      labels:
        chart: {{ .Chart.Version }}
        appVersion: {{ .Chart.AppVersion }}
        heritage: {{ .Release.Service }}
        {{- if .Values.isSlaveNode }}
        release: {{ .Values.customReleaseName }}
        release-fork: {{ .Release.Name }}
        {{- else }}
        release: {{ .Release.Name }}
        {{- end }}
    spec:
      securityContext:
        runAsGroup: {{ .Values.runAsGroup }}
        runAsUser: {{ .Values.runAsUser }}
        fsGroup: {{ .Values.fsGroup }}
      volumes:
      {{- if .Values.useLotusSecret }}
        - name: lotus-secret-vol
          secret:
            secretName: {{ .Release.Name }}-lotus-secret
            defaultMode: 384 # permission 0600
      {{- end}}
      {{- if or .Values.isSpotInstance .Values.useLocalStorage}}
        - name: {{ .Values.lotusVolumeName }}
          hostPath:
            path: {{ .Values.appHostPath }}
            type: Directory
      {{- end }}
      {{- if  and .Values.isSpotInstance .Values.useIpfs}}
        - name: {{ .Values.ipfsVolumeName }}
          hostPath:
            path: {{ .Values.appHostPath }}
            type: Directory
      {{- end}}
      initContainers:
      {{- if .Values.importSnapshot }}
      - name: hostpath-permission
        image: busybox
        imagePullPolicy: Always
        command: ["/bin/sh","-c"]
        args:
          - mkdir -p /tmp/lotus /tmp/ipfs /tmp/snapshot && chown -R 2000:2000 /tmp;
        securityContext:
          runAsUser: 0
        volumeMounts:
          - name: {{ .Values.lotusVolumeName }}
            mountPath: /tmp
      {{- if .Values.downloadSnapshotUrl }}
      - name: download-zst-snapshot
        image: alpine:3.17
        imagePullPolicy: Always
        workingDir: /home/lotus_user/snapshot
        command:
          - "/bin/sh"
          - "-c"
        args:
          - set -euo pipefail;
            RESTART={{ .Values.lotusEnv.INFRA_CLEAR_RESTART }};
            if [ $RESTART = false ] && [ "$(ls -A /home/lotus_user/.lotus)" ]; then
              echo "nothing to do here, lotus already have ledger";
              exit 0;
            fi;
            rm -rf /home/lotus_user/.lotus/* && rm -rf /home/lotus_user/snapshot/*;
            echo "Downloading zst snapshot";
            apk --no-cache add aria2=1.36.0-r1 zstd=1.5.2-r9 &&
            aria2c --allow-overwrite --max-connection-per-server 5 --split 5
              {{ .Values.downloadSnapshotUrl }} -o latest.zst &&
            pzstd -v --processes "$(nproc)" --force --rm --decompress latest.zst -o latest.car;
        securityContext:
          runAsUser: 0
        volumeMounts:
          - name: {{ .Values.lotusVolumeName }}
            mountPath: /home/lotus_user/snapshot
            subPath: snapshot
          - name: {{ .Values.lotusVolumeName }}
            mountPath: /home/lotus_user/.lotus
            subPath: lotus
      {{- end }}
      {{- end }}
      containers:
      {{- if .Values.useIpfs }}
      - name: {{ .Chart.Name }}-ipfs
        imagePullPolicy: {{ .Values.ipfsImagePullPolicy }}
        image: {{ .Values.ipfsImageRepository }}
        livenessProbe:
          httpGet:
            path: /webui
            port: 5001
          initialDelaySeconds: 200
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 6
        securityContext:
          runAsUser: 0
        ports:
        - containerPort: 4001
        - containerPort: 5001
        - containerPort: 8080
          name: rpc
        volumeMounts:
          - name: vol-ipfs
            mountPath: /data/ipfs
            {{- if .Values.isSpotInstance }}
            subPath: ipfs
            {{- end }}
        resources:
          requests:
            cpu: {{ .Values.ipfsRequestsCpu }}
            memory: {{ .Values.ipfsRequestsMemory }}
          limits:
            cpu: {{ .Values.ipfsCpuLimit }}
            memory: {{ .Values.ipfsMemoryLimit }}
      {{- end }}
      - name: {{ .Chart.Name }}
        image: {{ .Values.lotusImageRepository }}
        imagePullPolicy: {{ .Values.lotusImagePullPolicy }}
        command: ["/etc/lotus/docker/run"]
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh","-c","rm -f $INFRA_LOTUS_HOME/.lotus/sync-complete"]
        env:
        {{- range $key, $value := .Values.lotusEnv }}
        - name: {{ $key }}
          value: {{ $value | quote }}
        {{- end }}
        {{- if .Values.importSnapshot }}
        {{- if .Values.snapshotLocation }}
        - name: INFRA_IMPORT_SNAPSHOT
          value: "true"
        - name: SNAPSHOTURL
          value: {{ .Values.snapshotLocation }}
        {{- end }}
        {{- if and .Values.ipfsGateway .Values.snapshotCid }}
        - name: INFRA_IMPORT_SNAPSHOT_FROM_IPFS
          value: "true"
        - name: SNAPSHOT_CID
          value: {{ .Values.snapshotCid }}
        - name: IPFS_GW
          value: {{ .Values.ipfsGateway }}
        {{- end }}
        {{- end }}
        {{- if .Values.useIpfs }}
        - name: LOTUS_CLIENT_USEIPFS
          value: "true"
        - name: LOTUS_CLIENT_IPFSUSEFORRETRIEVAL
          value: "true"
        - name: LOTUS_CLIENT_IPFSMADDR
          value: "/ip4/127.0.0.1/tcp/5001"
        {{- end }}
        livenessProbe:
          tcpSocket:
            port: api
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 10
        readinessProbe:
          exec:
            command:
            - healthcheck
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 3
        startupProbe:
          exec:
            command:
            - cat
            {{- if .Values.importSnapshot }}
            - /home/lotus_user/.lotus/import-complete
            {{- else }}
            - /home/lotus_user/.lotus/sync-complete
            {{- end }}
          failureThreshold: 1000
          periodSeconds: 200
          successThreshold: 1
          timeoutSeconds: 10
        ports:
        - containerPort: 1234
          name: api
        - containerPort: 1235
          name: p2p
        {{- if .Values.lotusEnv.INFRA_LOTUS_GATEWAY }}
        - containerPort: 2346
          name: gateway
        {{- end }}
        volumeMounts:
          {{- if .Values.useLotusSecret }}
          - name: lotus-secret-vol
            mountPath: /keystore
          {{- end }}
          - name: {{ .Values.lotusVolumeName }}
            mountPath: /home/lotus_user/.lotus
            {{- if .Values.isSpotInstance }}
            subPath: lotus
            {{- end }}
          {{- if and .Values.importSnapshot .Values.downloadSnapshotUrl }}
          - name: {{ .Values.lotusVolumeName }}
            mountPath: /home/lotus_user/snapshot
            subPath: snapshot
          {{- end }}
          {{- if .Values.importVolume }}
          - name: {{ .Values.importVolumeName }}
            mountPath: /chain
          {{- end }}
          {{- if and .Values.useIpfs }}
          - name: vol-ipfs
            mountPath: /data/ipfs
            {{- if .Values.isSpotInstance }}
            subPath: ipfs
            {{- end }}
          {{- end }}
        resources:
          limits:
            cpu: {{ .Values.lotusCpuLimit }}
            memory: {{ .Values.lotusMemoryLimit }}
          requests:
            cpu: {{ .Values.lotusRequestsCpu }}
            memory: {{ .Values.lotusRequestsMemory }}

      nodeSelector:
      {{- range $key, $value := .Values.nodeSelector }}
        {{ $key }}: {{ $value | quote }}
      {{- end }}
  {{- if not .Values.isSpotInstance }}
  volumeClaimTemplates:
    {{- if not .Values.useLocalStorage }}
    - metadata:
        name: {{ .Values.lotusVolumeName }}
      spec:
        accessModes:
          {{- range .Values.lotusVolumeAccessModes }}
            - {{ . | quote }}
          {{- end }}
        resources:
            requests:
                storage: {{ .Values.lotusVolumeSize | quote }}
        storageClassName: {{ .Values.lotusVolumeStorageClass | quote }}
        {{- if .Values.restoreVolumeSnapshot }}
        dataSource:
          name: {{ .Values.volumeSnapshotName }}
          kind: VolumeSnapshot
          apiGroup: snapshot.storage.k8s.io
        {{- end }}
    {{- end }}
    {{- if .Values.useIpfs }}
    - metadata:
        name: {{ .Values.ipfsVolumeName }}
      spec:
        accessModes:
          {{- range .Values.ipfsVolumeAccessModes }}
            - {{ . | quote }}
          {{- end }}
        resources:
            requests:
                storage: {{ .Values.ipfsVolumeSize | quote }}
        storageClassName: {{ .Values.ipfsVolumeStorageClass | quote }}
    {{- end }}
  {{- end }}
{{- end }}
