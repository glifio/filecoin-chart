{{- if .Values.persistence.enabled }}
{{- if .Values.persistence.snapshots.enabled }}
{{- if and .Values.ipfs.enabled .Values.persistence.snapshots.uploadToIpfs.enabled }}
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: {{ .Release.Name }}-internal-snapshot-creator
spec:
  schedule: {{ .Values.persistence.snapshots.uploadToIpfs.cron | default "0 0 * * *" }}
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  concurrencyPolicy: "Forbid"
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: "Never"
          serviceAccountName: {{ .Release.Name }}-{{ .Values.serviceAccount.name }}
          initContainers:
            {{- if eq .Values.persistence.snapshots.uploadToIpfs.export "hot" }}
            - name: exporter
              image: bitnami/kubectl
              command: ["/bin/bash","-c"]
              args:
                - |
                  until kubectl exec {{ .Release.Name }}-{{ .Values.client }}-0 -c {{ .Values.client }}-daemon -- bash -c 'lotus chain export --tipset @$( lotus chain list --count 50 --format "<height>" | head -n1 ) --recent-stateroots 900 --skip-old-msgs /data/ipfs/lotus-hot.car && mv /data/ipfs/lotus-hot.car /data/ipfs/lotus-new.car'
                  do
                    echo "Command executed with error, retrying in 60s..."
                    sleep 60s
                  done 
            {{- end }}
            - name: sharer
              image: bitnami/kubectl
              command: ["/bin/bash","-c"]
              args:
                - |
                  until kubectl exec {{ .Release.Name }}-{{ .Values.client }}-0 -c {{ .Values.client }}-daemon -- bash -c 'while true; do echo "Checking if file is ready..." && if ! [[ `pgrep -x "lotus-shed"` ]] && [ -s "/data/ipfs/lotus-new.car" ]; then echo "File is ready. Exporting..." && break; else echo "File is not ready, sleeping for 60s..." && sleep 60s; fi; done'
                  do 
                    echo "First command executed with error, retrying in 60s..."
                    sleep 60s
                  done 
                  kubectl exec {{ .Release.Name }}-{{ .Values.client }}-0 -c {{ .Values.client }}-daemon-ipfs -- sh -c 'mkdir -p /data/ipfs/snapshots && mv /data/ipfs/lotus-new.car /data/ipfs/snapshots/lotus.car && ipfs pin ls -q --type recursive | xargs ipfs pin rm && ipfs repo gc && ipfs add /data/ipfs/snapshots/lotus.car | cut -d " " -f2 > /data/ipfs/snapshots/snapshot.log && echo "Exported. Exiting..."'
          {{- if .Values.persistence.snapshots.uploadToIpfs.shareToGist.enabled }}
          containers:
            - name: gitter
              image: bitnami/kubectl
              securityContext:
                runAsUser: 0
              volumeMounts:
                - name: lotus-secret-vol
                  mountPath: "/secret"
              env:
              - name: GIT_SSH_COMMAND
                value: ssh -i /secret/ssh -o IdentitiesOnly=yes
              command: ["/bin/sh", "-c"]
              args:
                - |
                  echo "Job started. Waiting for log file to be available..."
                  kubectl exec -t {{ .Release.Name }}-{{ .Values.client }}-0 -c {{ .Values.client }}-daemon -- bash -c 'while true; do if [ -f "/data/ipfs/snapshots/snapshot.log" ]; then cat /data/ipfs/snapshots/snapshot.log && break; else sleep 5s; fi; done' > /tmp/snapshot.log
                  echo "Log exported. Check if it is not empty..."
                  if [ -s /tmp/snapshot.log ]
                  then
                    echo "Not empty. Installing git on machine..."
                    apt update -y
                    apt install git -y
                    echo "Installed. Fetching gist.github.com SSH keys..."
                    mkdir -p /root/.ssh
                    ssh-keyscan -t rsa gist.github.com >> /root/.ssh/known_hosts
                    echo "Fetched. Cloning repo..."
                    git clone {{ .Values.persistence.snapshots.uploadToIpfs.shareToGist.address }} /tmp/snapshots
                    echo "Cloned. Updating data..."
                    cp /tmp/snapshot.log /tmp/snapshots/snapshot.log
                    cd /tmp/snapshots
                    echo "Updated. Configuring git..."
                    git config user.name "{{ .Values.persistence.snapshots.uploadToIpfs.shareToGist.authorName }}"
                    git config user.email "{{ .Values.persistence.snapshots.uploadToIpfs.shareToGist.authorEmail }}"
                    echo "Configured. Commiting data..."
                    git commit --allow-empty -a -m "new export"
                    echo "Commited. Pushing data..."
                    git push
                    echo "Pushed. Removing log file..."
                    kubectl exec {{ .Release.Name }}-{{ .Values.client }}-0 -c {{ .Values.client }}-daemon-ipfs -- sh -c "rm /data/ipfs/snapshots/snapshot.log"
                    echo "Removed log file. Exiting container..."
                  else 
                    echo "Error! Log file is empty for some reason..."
                    false
                  fi
          volumes:
            - name: lotus-secret-vol
              secret:
                secretName: {{ .Release.Name }}-lotus-secret
                defaultMode: 384  
          {{- end }}
{{- end }}
{{- end }}
{{- end }}
